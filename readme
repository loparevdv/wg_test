Задача оказалась интересной, было приятно ее решить:)

Деплоймент
Нужно установить зависимости из файла pip_req
Настроить базу данных в wh_chess/local.py

Особых сложностей, кажется, не было. Но было несколько факапов, самый смешной и долгий получился такой:
При оптимизации заметил что  функция swiss.views.set_result очень медленно работает (процесс что-то вроде нагрузочного тестирования: fixt.play_whole_round). Долго с ней бился, старался различными способами оптимизировать, но бесполезно: при стандартной и правильной, казалось бы логике откуда-то бралось астрономическое (для задачи) количество запросов.
Проблема была в следующем: на стадии прототипа не было верстки и ajax, поэтому функция возвращала url чемпионата для которого определяется результат, а это весьма тяжелая операция с несколькими джоинами.
Когда функция стала возвращать "200 ОК" время выполнения уменьшилось до приемлемых значений.

Примечания по реализации:
 - swiss - приложение для турнира
 - templates - шаблоны проекта
 - wg_chess - конфиги и корневой url.
 - Почти вся логика находится в моделях (или прокси-классах)
 - классы RoundGroupProxy и RoundGroupProxyList -- содержат логику для быстрого сохранения и интерфейсы для определения конфигурации раунда (группы, игроки, переводы)
 - Модель TournamentRank это как бы профиль игрока на турнире, хранит всяческую информацию
 - По специфике задачи (при определенных действях нужно создавать много объектов в БД) очень пригодилась bulk_create.
 - При работе с матчами очень пригодилось select_related.
 - models.Matchup хранит значение очков, которые игрок получил в матче -- удобно считать суммы
 - для каждого раунда (models.Round) приходся хранить nonplayer'a -- игрока, переходящего в следующий тур без игры
 - Модель Lot нужна для хранения жеребьевки. Можно понять кто был переведенным игроком
 - шаблоны и клиентские скрипты получились простыми
 - fixt.py - микроутилитки для упрощения разработки и отладки
 - Все без jQuery
 - самая базовая верстка с twitter bootstrap

На задачу ушло окола 40 часов (подготовка, проектирование, реализация, тестирование-отладка). В дерганном темпе, можно было бы тратить по 8 часов в неделю -- думаю, получилось бы быстрее :)
